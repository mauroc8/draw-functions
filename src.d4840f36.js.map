{"version":3,"sources":["graph.js","index.js"],"names":["HTMLElement","Graph","canvas","document","createElement","cx","getContext","appendChild","offset","x","y","scale","drawGraph","attr","_","value","height","viewportY","Number","getAttribute","width","drawGrid","drawAxis","drawFunction","lowerBound","viewportToWorld","upperBound","beginPath","worldToViewport","Math","floor","moveTo","lineTo","viewportX","lerp","a","b","t","opacity","strokeStyle","stroke","axisCenter","functionName","functionColor","fn","Function","lastViewportY","isOutOfBounds","lineWidth","app","Elm","Main","init","node","getElementById","flags","firstInputValue","localStorage","getItem","secondInputValue","window","customElements","define","ports","saveFirstInputValue","subscribe","setItem","saveSecondInputValue","addEventListener","event","onTouchEnd","send"],"mappings":"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","file":"src.d4840f36.js","sourceRoot":"..\\src","sourcesContent":["export default class Graph extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n\r\n        this.canvas = document.createElement(\"canvas\");\r\n\r\n        this.cx = this.canvas.getContext(\"2d\");\r\n\r\n        this.appendChild(this.canvas);\r\n\r\n        this.offset = { x: 60.5, y: 60.5 };\r\n        this.scale = { x: 20, y: 20 };\r\n    }\r\n\r\n    // Lyfecycle events\r\n\r\n    connectedCallback() {\r\n        this.drawGraph();\r\n    }\r\n\r\n    attributeChangedCallback(attr, _, value) {\r\n        this.drawGraph();\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return [\r\n            \"first-function\",\r\n            \"second-function\",\r\n            \"width\",\r\n            \"height\",\r\n            \"offset-x\",\r\n            \"offset-y\",\r\n            \"scale-x\",\r\n            \"scale-y\",\r\n        ];\r\n    }\r\n\r\n    // Math stuff\r\n\r\n    viewportToWorld({ x, y }) {\r\n        return {\r\n            x: (x - this.offset.x) / this.scale.x,\r\n            y: (this.height - y - this.offset.y) / this.scale.y,\r\n        };\r\n    }\r\n\r\n    worldToViewport({ x, y }) {\r\n        return {\r\n            x: x * this.scale.x + this.offset.x,\r\n            y: this.height - (y * this.scale.y + this.offset.y),\r\n        };\r\n    }\r\n\r\n    isOutOfBounds(viewportY) {\r\n        return viewportY < 0 || viewportY > this.height;\r\n    }\r\n\r\n    // Draw methods\r\n\r\n    drawGraph() {\r\n        //console.time(\"draw\");\r\n\r\n        // Update attributes\r\n\r\n        this.offset = {\r\n            x: (Number(this.getAttribute(\"offset-x\")) || 60) + 0.5,\r\n            y: (Number(this.getAttribute(\"offset-y\")) || 60) + 0.5,\r\n        };\r\n\r\n        this.scale = {\r\n            x: Number(this.getAttribute(\"scale-x\")) || 20,\r\n            y: Number(this.getAttribute(\"scale-y\")) || 20,\r\n        };\r\n\r\n        this.canvas.width = this.width = Number(this.getAttribute(\"width\"));\r\n\r\n        this.canvas.height = this.height = Number(this.getAttribute(\"height\"));\r\n\r\n        // Note: No need to cx.clearRect() because changing canvas' width automatically does that.\r\n\r\n        this.drawGrid();\r\n\r\n        this.drawAxis();\r\n\r\n        // The color is equivalent to tailwind's text-green-500\r\n        this.drawFunction(\"second-function\", \"#48bb78\");\r\n\r\n        // The color is equivalent to tailwind's text-blue-500\r\n        this.drawFunction(\"first-function\", \"#4299e1\");\r\n\r\n        //console.timeEnd(\"draw\");\r\n    }\r\n\r\n    drawGrid() {\r\n        let { cx, width, height } = this;\r\n\r\n        // Drawing bounds, ie. the lower and higher positions in world space that we care to draw\r\n\r\n        let lowerBound = this.viewportToWorld({ x: 0, y: this.height });\r\n\r\n        let upperBound = this.viewportToWorld({ x: this.width, y: 0 });\r\n\r\n        cx.beginPath();\r\n\r\n        for (let y = lowerBound.y; y < upperBound.y + 1; y += 1) {\r\n            const viewportY = this.worldToViewport({\r\n                x: 0,\r\n                y: Math.floor(y),\r\n            }).y;\r\n\r\n            if (viewportY === 0) continue;\r\n\r\n            cx.moveTo(0, viewportY);\r\n            cx.lineTo(width, viewportY);\r\n        }\r\n\r\n        for (let x = lowerBound.x; x < upperBound.x + 1; x += 1) {\r\n            const viewportX = this.worldToViewport({\r\n                x: Math.floor(x),\r\n                y: 0,\r\n            }).x;\r\n\r\n            if (viewportX === 0) continue;\r\n\r\n            cx.moveTo(viewportX, 0);\r\n            cx.lineTo(viewportX, height);\r\n        }\r\n\r\n        /* We make the grid more invisible when the scale is lower.\r\n           Otherwise we'd get a lot of visual noise from the grid lines.\r\n        */\r\n\r\n        const lerp = (a, b, t) => {\r\n            // Clamp between 0 and 1\r\n            t = t > 1 ? 1 : t < 0 ? 0 : t;\r\n\r\n            return (1 - t) * a + b * t;\r\n        };\r\n\r\n        // When scale is 0, opacity is 0.01\r\n        // When scale is 100, opacity is 0.1\r\n\r\n        const opacity = lerp(0.01, 0.1, this.scale.x / 100);\r\n\r\n        cx.strokeStyle = `rgba(0, 0, 0, ${opacity})`;\r\n\r\n        cx.stroke();\r\n    }\r\n\r\n    drawAxis() {\r\n        let axisCenter = this.worldToViewport({ x: 0, y: 0 });\r\n\r\n        let cx = this.cx;\r\n\r\n        cx.beginPath();\r\n\r\n        cx.moveTo(0, axisCenter.y);\r\n        cx.lineTo(this.width, axisCenter.y);\r\n\r\n        cx.moveTo(axisCenter.x, 0);\r\n        cx.lineTo(axisCenter.x, this.height);\r\n\r\n        cx.strokeStyle = \"#bbb\";\r\n\r\n        cx.stroke();\r\n    }\r\n\r\n    drawFunction(functionName, functionColor) {\r\n        let cx = this.cx;\r\n\r\n        // THIS is awkard to some people. It's basically making an `eval`\r\n        // BUT it's the fastest way possible.\r\n        // Consider we need to evaluate the expression ~1024 times each redraw (if the screen is big enough).\r\n        // (And having faster redraws allows us to do fancy animations!)\r\n\r\n        let fn = new Function(\"x\", \"return \" + this.getAttribute(functionName));\r\n\r\n        let width = this.width;\r\n\r\n        cx.beginPath();\r\n\r\n        let lastViewportY = 0;\r\n\r\n        for (let viewportX = 0; viewportX < width; viewportX++) {\r\n            let x = this.viewportToWorld({ x: viewportX, y: 0 }).x;\r\n\r\n            let y = fn(x);\r\n\r\n            let viewportY = this.worldToViewport({ x: 0, y: y }).y;\r\n\r\n            if (\r\n                viewportX === 0 ||\r\n                (this.isOutOfBounds(lastViewportY) &&\r\n                    this.isOutOfBounds(viewportY))\r\n            ) {\r\n                cx.moveTo(viewportX, viewportY);\r\n            } else {\r\n                cx.lineTo(viewportX, viewportY);\r\n            }\r\n\r\n            lastViewportY = viewportY;\r\n        }\r\n\r\n        cx.strokeStyle = functionColor;\r\n\r\n        cx.lineWidth = 1;\r\n\r\n        cx.stroke();\r\n    }\r\n}\r\n","import { Elm } from \"./Main.elm\";\r\n\r\nimport Graph from \"./graph.js\";\r\n\r\nimport \"./styles.pcss\";\r\n\r\nconst app = Elm.Main.init({\r\n\tnode: document.getElementById(\"elm-app\"),\r\n\tflags: {\r\n\t\tfirstInputValue: localStorage.getItem(\"firstInputValue\") || \"sin(x)\",\r\n\t\tsecondInputValue: localStorage.getItem(\"secondInputValue\") || \"\",\r\n\t},\r\n});\r\n\r\nwindow.customElements.define(\"graph-element\", Graph);\r\n\r\napp.ports.saveFirstInputValue.subscribe(function (firstInputValue) {\r\n\tlocalStorage.setItem(\"firstInputValue\", firstInputValue);\r\n});\r\n\r\napp.ports.saveSecondInputValue.subscribe(function (secondInputValue) {\r\n\tlocalStorage.setItem(\"secondInputValue\", secondInputValue);\r\n});\r\n\r\nwindow.addEventListener(\"touchend\", function (event) {\r\n\tapp.ports.onTouchEnd.send(event);\r\n});\r\n"]}